{"version":3,"file":"editor.min.js","mappings":"MAeA,MAAMA,EAA+B,CACnC,iBACA,eACA,YACA,iBACA,aACA,aACA,kBACA,oBACA,qBAgBFC,GAAGC,MAAMC,UAAU,2BAA4B,+BAZ/C,SAAmCC,EAAUC,GAC3C,OAAKL,EAA6BM,SAASD,GAGpCE,OAAOC,OAAO,CAAC,EAAGJ,EAAU,CACjCK,WAAYF,OAAOC,OAAO,CAAC,EAAGJ,EAASK,WAAY,CACjDC,SAAU,CACRC,KAAM,cALHP,CASX,IAIA,MAAMQ,EAAKX,GAAGY,QAAQC,cAChBC,EAAqBd,GAAGe,QAAQC,4BAA2BC,GACxDC,IACL,IAAKnB,EAA6BM,SAASa,EAAMd,MAC/C,OAAOO,EAAGM,EAAW,IAAKC,IAE5B,MAAM,WAAEV,EAAU,cAAEW,GAAkBD,GAChC,SAAET,GAAaD,EACrB,OAAOG,EACLX,GAAGY,QAAQQ,SACX,CAAC,EACDT,EACEX,GAAGqB,YAAYC,cACf,CACEC,MAAO,UAETZ,EACEX,GAAGwB,WAAWC,aACd,CAAC,EACDd,EAAGX,GAAGwB,WAAWE,cAAe,CAC9BC,KAAM,mBACNC,MAAO5B,GAAG6B,KAAKC,GAAG,qBAAsB,QACxCC,SAAuB,YAAbtB,EACVuB,QAASA,KAELb,EADe,YAAbV,EACY,CAAEA,SAAU,UAEZ,CAAEA,SAAU,WAC5B,MAKRE,EAAGM,EAAW,IAAKC,IACpB,GAEF,sBACHlB,GAAGC,MAAMC,UAAU,mBAAoB,0CAA2CY,GAGlF,MAAMmB,EAAyBjC,GAAGe,QAAQC,4BAA2BkB,GAC5DhB,IAEL,IAAKnB,EAA6BM,SAASa,EAAMd,MAC/C,OAAOO,EAAGuB,EAAgB,IAAKhB,IAGjC,MAAM,WAAEV,GAAeU,GACjB,SAAET,GAAaD,EAErB,OACSG,EAAGuB,EADRzB,GAAyB,YAAbA,EACY,CAAE0B,UAAW,uBAAwBjB,GAErC,IAAKA,GACjC,GAED,0BACHlB,GAAGC,MAAMC,UAAU,wBAAyB,+CAAgD+B,GAe5FjC,GAAGC,MAAMC,UAAU,mCAAoC,8CAXzBkC,CAACC,EAAYC,EAAW9B,KAEpD,GAAIT,EAA6BM,SAASiC,EAAUlC,MAAO,CACzD,MAAM,SAAEK,GAAaD,EACjBC,GAAyB,YAAbA,IACd4B,EAAWF,UAAYI,WAAWF,EAAWF,UAAW,qBAE5D,CACA,OAAOE,CAAU,G","sources":["webpack://msu-la/./src/scripts/editor.js"],"sourcesContent":["// wp.domReady(() => {\n//   wp.blocks.registerBlockStyle('core/columns', [\n//     {\n//       name: 'default',\n//       label: 'Default',\n//       isDefault: true,\n//     },\n//     {\n//       name: 'homepage',\n//       label: 'Homepage Form Columns',\n//     },\n//   ]);\n// });\n\n// Blocks to add the text-wrap option to\nconst enableTextWrapButtonOnBlocks = [\n  'core/paragraph',\n  'core/heading',\n  'core/list',\n  'core/list-item',\n  'core/quote',\n  'core/verse',\n  'core/post-title',\n  'core/post-excerpt',\n  'core/post-content',\n];\n\n// Add custom attribute to paragraph for text-wrap\nfunction setToolbarButtonAttribute(settings, name) {\n  if (!enableTextWrapButtonOnBlocks.includes(name)) {\n    return settings;\n  }\n  return Object.assign({}, settings, {\n    attributes: Object.assign({}, settings.attributes, {\n      textWrap: {\n        type: 'string',\n      },\n    }),\n  });\n}\nwp.hooks.addFilter('blocks.registerBlockType', 'custom-attributes/text-wrap', setToolbarButtonAttribute);\n\n// Add button to paragraph toolbar to activate/deactivate text-wrap: balance\nconst el = wp.element.createElement;\nconst withTextWrapButton = wp.compose.createHigherOrderComponent(BlockEdit => {\n  return props => {\n    if (!enableTextWrapButtonOnBlocks.includes(props.name)) {\n      return el(BlockEdit, { ...props });\n    }\n    const { attributes, setAttributes } = props;\n    const { textWrap } = attributes;\n    return el(\n      wp.element.Fragment,\n      {},\n      el(\n        wp.blockEditor.BlockControls,\n        {\n          group: 'inline',\n        },\n        el(\n          wp.components.ToolbarGroup,\n          {},\n          el(wp.components.ToolbarButton, {\n            icon: 'editor-alignleft',\n            label: wp.i18n.__('Text Wrap: Balance', 'mdhs'),\n            isActive: textWrap === 'balance',\n            onClick: () => {\n              if (textWrap === 'balance') {\n                setAttributes({ textWrap: 'normal' });\n              } else {\n                setAttributes({ textWrap: 'balance' });\n              }\n            },\n          })\n        )\n      ),\n      el(BlockEdit, { ...props })\n    );\n  };\n}, 'withTextWrapButton');\nwp.hooks.addFilter('editor.BlockEdit', 'custom-attributes/with-text-wrap-button', withTextWrapButton);\n\n// Add css class to block wrapper based on attribute\nconst withTextWrapButtonProp = wp.compose.createHigherOrderComponent(BlockListBlock => {\n  return props => {\n    // If current block is not allowed\n    if (!enableTextWrapButtonOnBlocks.includes(props.name)) {\n      return el(BlockListBlock, { ...props });\n    }\n\n    const { attributes } = props;\n    const { textWrap } = attributes;\n\n    if (textWrap && textWrap === 'balance') {\n      return el(BlockListBlock, { className: 'text-wrap-balance', ...props });\n    } else {\n      return el(BlockListBlock, { ...props });\n    }\n  };\n}, 'withTextWrapButtonProp');\nwp.hooks.addFilter('editor.BlockListBlock', 'custom-attributes/with-text-wrap-button-prop', withTextWrapButtonProp);\n\n// Save textWrap attribute to blocks\n\nconst saveTextWrapAttribute = (extraProps, blockType, attributes) => {\n  // Do nothing if it's another block than our defined ones\n  if (enableTextWrapButtonOnBlocks.includes(blockType.name)) {\n    const { textWrap } = attributes;\n    if (textWrap && textWrap === 'balance') {\n      extraProps.className = classNames(extraProps.className, 'text-wrap-balance');\n    }\n  }\n  return extraProps;\n};\n\nwp.hooks.addFilter('blocks.getSaveContent.extraProps', 'custom-attributes/save-text-wrap-attribute', saveTextWrapAttribute);\n"],"names":["enableTextWrapButtonOnBlocks","wp","hooks","addFilter","settings","name","includes","Object","assign","attributes","textWrap","type","el","element","createElement","withTextWrapButton","compose","createHigherOrderComponent","BlockEdit","props","setAttributes","Fragment","blockEditor","BlockControls","group","components","ToolbarGroup","ToolbarButton","icon","label","i18n","__","isActive","onClick","withTextWrapButtonProp","BlockListBlock","className","saveTextWrapAttribute","extraProps","blockType","classNames"],"sourceRoot":""}